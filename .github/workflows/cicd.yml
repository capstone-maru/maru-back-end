name: Code deploy

on:
  pull_request:
    branches: [ "main" ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

jobs:
  build:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-oauth.yml
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-oauth.yml

      - name: make application-datasource.yaml
        run: |
          cd ./src/main/resources
          touch ./application-datasource.yaml
          echo "${{ secrets.APPLICATION_DATASOURCE }}" > ./application-datasource.yaml

      - name: make application-cloud.yaml
        run: |
          cd ./src/main/resources
          touch ./application-cloud.yaml
          echo "${{ secrets.APPLICATION_CLOUD }}" > ./application-cloud.yaml

      - name: make firestore.json
        run: |
          cd ./src/main/resources
          touch ./firestore.json
          echo "${{ secrets.FIRESTORE }}" > ./firestore.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/maru:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/maru:latest
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.AWS_ACCESS_SECRET_KEY }} # pem 키
          # 도커 작업
          script: |
            #            touch ~/docker-compose.yml
            #            echo "${{ secrets.DOCKER_COMPOSE }}" > ~/docker-compose.yml
            #
            #            CONTAINERS=$(docker ps -q)
            #
            #            for CONTAINER in $CONTAINERS; do
            #              docker stop $CONTAINER
            #            done
            #
            #            docker rm $(docker ps -aq)
            #
            #            docker rmi $(docker images -q)
            #
            #            docker-compose up -d
            #
            #            docker image prune -a -f
            #                        
            # 환경 변수 설정 및 docker-compose.yml 파일 생성
                    touch ~/docker-compose.yml
                    echo "${{ secrets.DOCKER_COMPOSE }}" > ~/docker-compose.yml
            
            # 제외할 컨테이너 이름 설정
                    EXCLUDE_CONTAINER_NAME="maru-rec-sys-container"
            
            # 제외할 컨테이너 ID 가져오기
                    EXCLUDE_CONTAINER_ID=$(docker ps -qf "name=$EXCLUDE_CONTAINER_NAME")
            
            # 실행 중인 모든 컨테이너 ID 가져오기
                    CONTAINERS=$(docker ps -q)
            
            # 모든 컨테이너 중 제외할 컨테이너를 제외한 나머지 컨테이너 정지
                    for CONTAINER in $CONTAINERS; do
                    if [ "$CONTAINER" != "$EXCLUDE_CONTAINER_ID" ]; then
                    docker stop $CONTAINER
                    fi
                    done
            
            # 모든 컨테이너 중 제외할 컨테이너를 제외한 나머지 컨테이너 제거
                    docker ps -aq | grep -v $EXCLUDE_CONTAINER_ID | xargs docker rm
            
            # 모든 이미지 삭제 (제외할 컨테이너의 이미지는 삭제되지 않도록 주의)
                    docker rmi $(docker images -q)
            
            # docker-compose로 컨테이너 다시 시작
                    docker-compose up -d
            
            # 사용되지 않는 이미지 제거
                    docker image prune -a -f
